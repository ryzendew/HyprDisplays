name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.0.1)'
        required: true
        default: '0.0.1'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Qt environment
      run: |
        echo "Using system Qt6 packages"
        qmake6 --version || echo "qmake6 not found, will use cmake to find Qt6"

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential pkg-config wayland-protocols qt6-base-dev qt6-tools-dev squashfs-tools

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cd build
        make -j$(nproc)

    - name: Create AppImage
      run: |
        cd build
        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/scalable/apps
        
        # Copy executable and resources
        cp hyprdisplays AppDir/usr/bin/
        cp ../hyprdisplays.desktop AppDir/usr/share/applications/
        cp ../hyprdisplays.svg AppDir/usr/share/icons/hicolor/scalable/apps/
        
        # Create AppRun
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        cd "$(dirname "$0")"
        exec ./usr/bin/hyprdisplays "$@"
        EOF
        chmod +x AppDir/AppRun
        
        # Try to use linuxdeployqt for AppImage creation (more reliable in CI)
        echo "Attempting to use linuxdeployqt for AppImage creation..."
        
        # Download linuxdeployqt
        wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        chmod +x linuxdeployqt-continuous-x86_64.AppImage
        
        # Set up environment for linuxdeployqt
        export QMAKE=/usr/bin/qmake6
        export PATH="/usr/lib/x86_64-linux-gnu/qt6/bin:$PATH"
        
        # Create AppImage using linuxdeployqt
        ./linuxdeployqt-continuous-x86_64.AppImage AppDir/usr/share/applications/hyprdisplays.desktop -appimage
        
        # Rename the created AppImage
        if [ -f "HyprDisplays-x86_64.AppImage" ]; then
            mv HyprDisplays-x86_64.AppImage HyprDisplays-${{ github.event.inputs.version || github.ref_name }}.AppImage
        elif [ -f "hyprdisplays-x86_64.AppImage" ]; then
            mv hyprdisplays-x86_64.AppImage HyprDisplays-${{ github.event.inputs.version || github.ref_name }}.AppImage
        else
            echo "Warning: linuxdeployqt did not create expected AppImage, trying fallback method..."
            
            # Fallback: Use appimagetool with extraction
            wget -c "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
            chmod +x appimagetool-x86_64.AppImage
            
            # Try to run appimagetool directly (some CI environments support FUSE)
            if ./appimagetool-x86_64.AppImage AppDir HyprDisplays-${{ github.event.inputs.version || github.ref_name }}.AppImage; then
                echo "AppImage created successfully with direct appimagetool"
            else
                echo "Direct appimagetool failed, trying extraction method..."
                # Extract and use the binary
                ./appimagetool-x86_64.AppImage --appimage-extract
                find squashfs-root -name "*appimagetool*" -type f -exec chmod +x {} \;
                find squashfs-root -name "*appimagetool*" -type f -exec {} AppDir HyprDisplays-${{ github.event.inputs.version || github.ref_name }}.AppImage \;
            fi
        fi
        
        # Verify the AppImage was created
        ls -la *.AppImage
        echo "AppImage creation completed successfully"
        
        # Also create a tarball as fallback
        echo "Creating fallback tarball..."
        tar -czf HyprDisplays-${{ github.event.inputs.version || github.ref_name }}.tar.gz AppDir/
        ls -la *.tar.gz

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: HyprDisplays-${{ github.event.inputs.version || github.ref_name }}
        path: |
          build/HyprDisplays-${{ github.event.inputs.version || github.ref_name }}.AppImage
          build/HyprDisplays-${{ github.event.inputs.version || github.ref_name }}.tar.gz

  create-release:
    needs: build-linux
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version && format('v{0}', github.event.inputs.version) || github.ref_name }}
        name: HyprDisplays ${{ github.event.inputs.version || github.ref_name }}
        body: |
          ## HyprDisplays ${{ github.event.inputs.version || github.ref_name }}
          
          ### Alpha Release
          
          This is an alpha release of HyprDisplays, a Qt6-based graphical utility for managing monitors in Hyprland.
          
          ### Features
          - Drag-and-drop monitor arrangement
          - Advanced Hyprland options (HDR, 10-bit, wide gamut, VRR)
          - Real-time position editing
          - Native Hyprland config format
          
          ### Installation
          
          **Option 1: AppImage (Recommended)**
          Download the AppImage and run:
          ```bash
          chmod +x HyprDisplays-*.AppImage
          ./HyprDisplays-*.AppImage
          ```
          
          **Option 2: Extract from Tarball**
          If the AppImage doesn't work on your system:
          ```bash
          tar -xzf HyprDisplays-*.tar.gz
          cd HyprDisplays-*
          ./AppRun
          ```
          
          ### Building from Source
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd HyprDisplays
          mkdir build && cd build
          cmake ..
          make -j$(nproc)
          ```
          
          ### Dependencies
          - Qt6
          - Hyprland
          - CMake
          - C++17 compiler
        draft: false
        prerelease: true
        files: |
          artifacts/HyprDisplays-${{ github.event.inputs.version || github.ref_name }}/HyprDisplays-${{ github.event.inputs.version || github.ref_name }}.AppImage
          artifacts/HyprDisplays-${{ github.event.inputs.version || github.ref_name }}/HyprDisplays-${{ github.event.inputs.version || github.ref_name }}.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 